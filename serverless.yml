service: serverless-app
useDotenv: true
provider:
  name: aws
  runtime: nodejs16.x
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
  environment:
    DB_HOST: {env:DB_HOST}
    DB_USER: {env:DB_USER}
    DB_PASSWORD: {env:DB_PASSWORD}
    DB_NAME: {env:DB_NAME}
    BUCKET: {env:DB_BUCKET}

functions:
  create-user:
    handler: src/create-user.handler
    events:
      - httpApi:
          path: /users
          method: post
  list-users:
    handler: src/list-users.handler
    events:
      - httpApi:
          path: /users
          method: get
  uploader:
    handler: src/upload-user-img.handler
    events:
      - httpApi:
          path: /users/{userId}/image
          method: post
    role: UploadRole
    environment:
      BUCKET: ${env:BUCKET} 

resources:
  Resources:
    UploadRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: upload-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource:
                    Fn::Sub: "arn:aws:s3:::${env:BUCKET}/*" 
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    Fn::Sub: "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*:*"
custom:
  webpack:
    includeModules:
      forceExclude:
        - oracledb

plugins:
  - serverless-offline
  - serverless-dotenv-plugin